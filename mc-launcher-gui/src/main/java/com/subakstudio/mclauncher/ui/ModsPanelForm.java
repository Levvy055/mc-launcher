package com.subakstudio.mclauncher.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.*;
import java.util.List;

/**
 * Created by yeoupooh on 1/1/16.
 */
public class ModsPanelForm implements ActionListener {
    private final FileListModel installedModListModel;
    private final FileListModel downloadedModListModel;
    private JList<File> installedModList;
    private JPanel panel1;
    private JList<File> downloadedModList;
    private JButton openInstalledModsFolderButton;
    private JButton openUninstalledModsFolderButton;
    private JButton installSelectedButton;
    private JButton uninstallSelectedButton;
    private JButton refreshDownloadedModsButton;
    private JButton refreshInstalledModsButton;
    private ActionListener actionListener;

    public ModsPanelForm() {
        $$$setupUI$$$();
        installSelectedButton.setActionCommand(Commands.INSTALL_SELECTED_MODS);
        installSelectedButton.addActionListener(this);
        uninstallSelectedButton.setActionCommand(Commands.UNINSTALL_SELECTED_MODS);
        uninstallSelectedButton.addActionListener(this);
        openInstalledModsFolderButton.setActionCommand(Commands.OPEN_INSTALLED_MODS_FOLDER);
        openInstalledModsFolderButton.addActionListener(this);
        openUninstalledModsFolderButton.setActionCommand(Commands.OPEN_UNINSTALLED_MODS_FOLDER);
        openUninstalledModsFolderButton.addActionListener(this);
        refreshInstalledModsButton.setActionCommand(Commands.REFRESH_INSTALLED_MODS);
        refreshInstalledModsButton.addActionListener(this);
        refreshDownloadedModsButton.setActionCommand(Commands.REFRESH_DOWNLOADED_MODS);
        refreshDownloadedModsButton.addActionListener(this);

        installedModListModel = new FileListModel();
        downloadedModListModel = new FileListModel();
        installedModList.setModel(installedModListModel);
        downloadedModList.setModel(downloadedModListModel);
    }

    public void setActionListener(ActionListener actionListener) {
        this.actionListener = actionListener;
    }

    public void reloadModLists() {
        installedModListModel.reload();
        installedModList.updateUI();
        downloadedModListModel.reload();
        downloadedModList.updateUI();
    }

    public void updateInstalledModList(String path) {
        installedModListModel.reload(path);
        installedModList.updateUI();
    }

    public void updateDownloadedModList(String path) {
        downloadedModListModel.reload(path);
        downloadedModList.updateUI();
    }

    public List<File> getSelectedInstalledMods() {
        return installedModList.getSelectedValuesList();
    }

    public List<File> getSelectedDownloadedMods() {
        return downloadedModList.getSelectedValuesList();
    }

    /**
     * Invoked when an action occurs.
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals(Commands.REFRESH_INSTALLED_MODS)) {
            installedModListModel.reload();
        } else if (e.getActionCommand().equals(Commands.REFRESH_DOWNLOADED_MODS)) {
            downloadedModListModel.reload();
        }
        if (actionListener != null) {
            actionListener.actionPerformed(e);
        }
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setOrientation(0);
        panel1.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setLeftComponent(panel2);
        downloadedModList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        defaultListModel1.addElement("down1");
        defaultListModel1.addElement("down2");
        defaultListModel1.addElement("down3");
        downloadedModList.setModel(defaultListModel1);
        panel2.add(downloadedModList, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, 50), null, 0, false));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("strings_en").getString("downloaded.mods"));
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(354, 14), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Downloaded Mods Dir");
        panel2.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        refreshDownloadedModsButton = new JButton();
        this.$$$loadButtonText$$$(refreshDownloadedModsButton, ResourceBundle.getBundle("strings_en").getString("refresh"));
        panel3.add(refreshDownloadedModsButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openUninstalledModsFolderButton = new JButton();
        this.$$$loadButtonText$$$(openUninstalledModsFolderButton, ResourceBundle.getBundle("strings_en").getString("open.downloaded.mods.folder"));
        panel3.add(openUninstalledModsFolderButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(354, 30), null, 0, false));
        installSelectedButton = new JButton();
        this.$$$loadButtonText$$$(installSelectedButton, ResourceBundle.getBundle("strings_en").getString("install.selected.mods"));
        panel3.add(installSelectedButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel3.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setRightComponent(panel4);
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("strings_en").getString("installed.mods"));
        panel4.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        installedModList = new JList();
        final DefaultListModel defaultListModel2 = new DefaultListModel();
        defaultListModel2.addElement("file1");
        defaultListModel2.addElement("file2");
        defaultListModel2.addElement("file3");
        installedModList.setModel(defaultListModel2);
        panel4.add(installedModList, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, 100), null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel4.add(panel5, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        openInstalledModsFolderButton = new JButton();
        this.$$$loadButtonText$$$(openInstalledModsFolderButton, ResourceBundle.getBundle("strings_en").getString("open.mods.folder"));
        panel5.add(openInstalledModsFolderButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        refreshInstalledModsButton = new JButton();
        this.$$$loadButtonText$$$(refreshInstalledModsButton, ResourceBundle.getBundle("strings_en").getString("refresh"));
        panel5.add(refreshInstalledModsButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        uninstallSelectedButton = new JButton();
        this.$$$loadButtonText$$$(uninstallSelectedButton, ResourceBundle.getBundle("strings_en").getString("uninstall.selected.mods"));
        panel5.add(uninstallSelectedButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel5.add(panel6, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Mods Dir");
        panel4.add(label4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
